generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Produce {
    id         String       @id @default(cuid())
    name       String
    Ingredient Ingredient[]
}

model Ingredient {
    id             String        @id @default(cuid())
    recipe         Recipe?       @relation(fields: [recipeId], references: [id])
    recipeId       String?
    produce        Produce       @relation(fields: [produceId], references: [id])
    amount         Decimal
    ShoppingList   ShoppingList? @relation(fields: [shoppingListId], references: [id])
    shoppingListId String?
    produceId      String
}

model Recipe {
    id          String       @id @default(cuid())
    description String?
    ingredients Ingredient[]
    group       Group?       @relation(fields: [groupId], references: [id])
    groupId     String?
    user        User?        @relation(fields: [userId], references: [id])
    userId      String?
    servings    Int?
}

model Group {
    id             String        @id @default(cuid())
    name           String
    users          User[]
    recipes        Recipe[]
    shoppingList   ShoppingList? @relation(fields: [shoppingListId], references: [id])
    shoppingListId String?       @unique
}

model ShoppingList {
    id          String       @id @default(cuid())
    user        User?
    group       Group?
    ingredients Ingredient[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String        @id @default(cuid())
    name           String?
    email          String?       @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    groups         Group[]
    recipes        Recipe[]
    shoppingList   ShoppingList? @relation(fields: [shoppingListId], references: [id])
    shoppingListId String?       @unique
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
